  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Basic Business Information</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Business Name *</label>
              <input
                type="text"
                value={formData.business_name}
                onChange={(e) => handleInputChange('business_name', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="Enter your business name"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Business Type *</label>
              <div className="grid grid-cols-2 gap-2">
                {businessTypes.map(type => (
                  <label key={type} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.business_type.includes(type)}
                      onChange={(e) => handleArrayChange('business_type', type, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{type}</span>
                  </label>
                ))}
              </div>
              {formData.business_type.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.businessTypeOther}
                    onChange={(e) => handleOtherInputChange('businessTypeOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify your business type"
                  />
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Industry *</label>
              <div className="grid grid-cols-2 gap-2">
                {industries.map(industry => (
                  <label key={industry} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.industry.includes(industry)}
                      onChange={(e) => handleArrayChange('industry', industry, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{industry}</span>
                  </label>
                ))}
              </div>
              {formData.industry.includes('Others') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.industryOther}
                    onChange={(e) => handleOtherInputChange('industryOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify your industry"
                  />
                </div>
              )}
            </div>
          </div>
        )

      case 1:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Business Description</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Business Description *</label>
              <textarea
                value={formData.business_description}
                onChange={(e) => handleInputChange('business_description', e.target.value)}
                rows={4}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="Describe what your business does..."
              />
            </div>

             <div>
               <label className="block text-sm font-medium text-gray-700 mb-2">Target Audience (Select all that apply) *</label>
               <div className="space-y-4">
                 {/* Age Groups Card */}
                 <div className="border border-gray-200 rounded-lg">
                   <button
                     type="button"
                     onClick={() => toggleCard('ageGroups')}
                     className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50 transition-colors relative"
                   >
                     <span className="text-sm font-medium text-gray-700">Age Groups</span>
                     <div className="flex items-center space-x-2">
                       <span className="w-6 h-6 bg-pink-100 text-pink-600 rounded-full flex items-center justify-center text-xs font-medium">
                         {getSelectedCount('target_audience_age_groups')}
                       </span>
                       <svg 
                         className={`w-4 h-4 text-gray-400 transition-transform ${expandedCards.ageGroups ? 'rotate-180' : ''}`}
                         fill="none" 
                         stroke="currentColor" 
                         viewBox="0 0 24 24"
                       >
                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                       </svg>
                     </div>
                   </button>
                   {expandedCards.ageGroups && (
                     <div className="px-4 pb-4 border-t border-gray-100">
                       <div className="grid grid-cols-2 gap-2 pt-3">
                         {targetAudienceCategories.ageGroups.map(group => (
                           <label key={group} className="flex items-center space-x-2">
                             <input
                               type="checkbox"
                               checked={formData.target_audience_age_groups.includes(group)}
                               onChange={(e) => handleArrayChange('target_audience_age_groups', group, e.target.checked)}
                               className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                             />
                             <span className="text-sm text-gray-700">{group}</span>
                           </label>
                         ))}
                       </div>
                     </div>
                   )}
                 </div>

                 {/* Life Stage / Roles Card */}
                 <div className="border border-gray-200 rounded-lg">
                   <button
                     type="button"
                     onClick={() => toggleCard('lifeStages')}
                     className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50 transition-colors relative"
                   >
                     <span className="text-sm font-medium text-gray-700">Life Stage / Roles</span>
                     <div className="flex items-center space-x-2">
                       <span className="w-6 h-6 bg-pink-100 text-pink-600 rounded-full flex items-center justify-center text-xs font-medium">
                         {getSelectedCount('target_audience_life_stages')}
                       </span>
                       <svg 
                         className={`w-4 h-4 text-gray-400 transition-transform ${expandedCards.lifeStages ? 'rotate-180' : ''}`}
                         fill="none" 
                         stroke="currentColor" 
                         viewBox="0 0 24 24"
                       >
                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                       </svg>
                     </div>
                   </button>
                   {expandedCards.lifeStages && (
                     <div className="px-4 pb-4 border-t border-gray-100">
                       <div className="grid grid-cols-2 gap-2 pt-3">
                         {targetAudienceCategories.lifeStages.map(stage => (
                           <label key={stage} className="flex items-center space-x-2">
                             <input
                               type="checkbox"
                               checked={formData.target_audience_life_stages.includes(stage)}
                               onChange={(e) => handleArrayChange('target_audience_life_stages', stage, e.target.checked)}
                               className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                             />
                             <span className="text-sm text-gray-700">{stage}</span>
                           </label>
                         ))}
                       </div>
                     </div>
                   )}
                 </div>

                 {/* Professional / Business Type Card */}
                 <div className="border border-gray-200 rounded-lg">
                   <button
                     type="button"
                     onClick={() => toggleCard('professionalTypes')}
                     className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50 transition-colors relative"
                   >
                     <span className="text-sm font-medium text-gray-700">Professional / Business Type</span>
                     <div className="flex items-center space-x-2">
                       <span className="w-6 h-6 bg-pink-100 text-pink-600 rounded-full flex items-center justify-center text-xs font-medium">
                         {getSelectedCount('target_audience_professional_types')}
                       </span>
                       <svg 
                         className={`w-4 h-4 text-gray-400 transition-transform ${expandedCards.professionalTypes ? 'rotate-180' : ''}`}
                         fill="none" 
                         stroke="currentColor" 
                         viewBox="0 0 24 24"
                       >
                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                       </svg>
                     </div>
                   </button>
                   {expandedCards.professionalTypes && (
                     <div className="px-4 pb-4 border-t border-gray-100">
                       <div className="grid grid-cols-2 gap-2 pt-3">
                         {targetAudienceCategories.professionalTypes.map(type => (
                           <label key={type} className="flex items-center space-x-2">
                             <input
                               type="checkbox"
                               checked={formData.target_audience_professional_types.includes(type)}
                               onChange={(e) => handleArrayChange('target_audience_professional_types', type, e.target.checked)}
                               className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                             />
                             <span className="text-sm text-gray-700">{type}</span>
                           </label>
                         ))}
                       </div>
                     </div>
                   )}
                 </div>

                 {/* Lifestyle & Interests Card */}
                 <div className="border border-gray-200 rounded-lg">
                   <button
                     type="button"
                     onClick={() => toggleCard('lifestyleInterests')}
                     className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50 transition-colors relative"
                   >
                     <span className="text-sm font-medium text-gray-700">Lifestyle & Interests</span>
                     <div className="flex items-center space-x-2">
                       <span className="w-6 h-6 bg-pink-100 text-pink-600 rounded-full flex items-center justify-center text-xs font-medium">
                         {getSelectedCount('target_audience_lifestyle_interests')}
                       </span>
                       <svg 
                         className={`w-4 h-4 text-gray-400 transition-transform ${expandedCards.lifestyleInterests ? 'rotate-180' : ''}`}
                         fill="none" 
                         stroke="currentColor" 
                         viewBox="0 0 24 24"
                       >
                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                       </svg>
                     </div>
                   </button>
                   {expandedCards.lifestyleInterests && (
                     <div className="px-4 pb-4 border-t border-gray-100">
                       <div className="grid grid-cols-2 gap-2 pt-3">
                         {targetAudienceCategories.lifestyleInterests.map(interest => (
                           <label key={interest} className="flex items-center space-x-2">
                             <input
                               type="checkbox"
                               checked={formData.target_audience_lifestyle_interests.includes(interest)}
                               onChange={(e) => handleArrayChange('target_audience_lifestyle_interests', interest, e.target.checked)}
                               className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                             />
                             <span className="text-sm text-gray-700">{interest}</span>
                           </label>
                         ))}
                       </div>
                     </div>
                   )}
                 </div>

                 {/* Buyer Behavior Card */}
                 <div className="border border-gray-200 rounded-lg">
                   <button
                     type="button"
                     onClick={() => toggleCard('buyerBehavior')}
                     className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50 transition-colors relative"
                   >
                     <span className="text-sm font-medium text-gray-700">Buyer Behavior</span>
                     <div className="flex items-center space-x-2">
                       <span className="w-6 h-6 bg-pink-100 text-pink-600 rounded-full flex items-center justify-center text-xs font-medium">
                         {getSelectedCount('target_audience_buyer_behavior')}
                       </span>
                       <svg 
                         className={`w-4 h-4 text-gray-400 transition-transform ${expandedCards.buyerBehavior ? 'rotate-180' : ''}`}
                         fill="none" 
                         stroke="currentColor" 
                         viewBox="0 0 24 24"
                       >
                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                       </svg>
                     </div>
                   </button>
                   {expandedCards.buyerBehavior && (
                     <div className="px-4 pb-4 border-t border-gray-100">
                       <div className="grid grid-cols-2 gap-2 pt-3">
                         {targetAudienceCategories.buyerBehavior.map(behavior => (
                           <label key={behavior} className="flex items-center space-x-2">
                             <input
                               type="checkbox"
                               checked={formData.target_audience_buyer_behavior.includes(behavior)}
                               onChange={(e) => handleArrayChange('target_audience_buyer_behavior', behavior, e.target.checked)}
                               className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                             />
                             <span className="text-sm text-gray-700">{behavior}</span>
                           </label>
                         ))}
                       </div>
                     </div>
                   )}
                 </div>

                 {/* Other Card */}
                 <div className="border border-gray-200 rounded-lg">
                   <button
                     type="button"
                     onClick={() => toggleCard('other')}
                     className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50 transition-colors relative"
                   >
                     <span className="text-sm font-medium text-gray-700">Other</span>
                     <div className="flex items-center space-x-2">
                       <span className="w-6 h-6 bg-pink-100 text-pink-600 rounded-full flex items-center justify-center text-xs font-medium">
                         {formData.target_audience_other ? 1 : 0}
                       </span>
                       <svg 
                         className={`w-4 h-4 text-gray-400 transition-transform ${expandedCards.other ? 'rotate-180' : ''}`}
                         fill="none" 
                         stroke="currentColor" 
                         viewBox="0 0 24 24"
                       >
                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                       </svg>
                     </div>
                   </button>
                   {expandedCards.other && (
                     <div className="px-4 pb-4 border-t border-gray-100">
                       <div className="grid grid-cols-2 gap-2 pt-3">
                         {targetAudienceCategories.other.map(option => (
                           <label key={option} className="flex items-center space-x-2">
                             <input
                               type="checkbox"
                               checked={formData.target_audience_other === option || (option === 'Other (please specify)' && formData.target_audience_other && formData.target_audience_other !== 'Not Sure')}
                               onChange={(e) => {
                                 if (option === 'Not Sure') {
                                   handleInputChange('target_audience_other', e.target.checked ? 'Not Sure' : '')
                                 } else if (option === 'Other (please specify)') {
                                   if (e.target.checked) {
                                     handleInputChange('target_audience_other', 'Other (please specify)')
                                   } else {
                                     handleInputChange('target_audience_other', '')
                                   }
                                 }
                               }}
                               className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                             />
                             <span className="text-sm text-gray-700">{option}</span>
                           </label>
                         ))}
                       </div>
                       {formData.target_audience_other === 'Other (please specify)' && (
                         <div className="mt-3">
                           <input
                             type="text"
                             value={otherInputs.targetAudienceOther}
                             onChange={(e) => handleOtherInputChange('targetAudienceOther', e.target.value)}
                             className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                             placeholder="Please specify your target audience"
                           />
                         </div>
                       )}
                     </div>
                   )}
                 </div>
               </div>
             </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Unique Value Proposition *</label>
              <textarea
                value={formData.unique_value_proposition}
                onChange={(e) => handleInputChange('unique_value_proposition', e.target.value)}
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="What makes your business unique?"
              />
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Brand & Contact Information</h3>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Brand Voice *</label>
                <select
                  value={formData.brand_voice}
                  onChange={(e) => handleInputChange('brand_voice', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                >
                  <option value="">Select brand voice</option>
                  {brandVoices.map(voice => (
                    <option key={voice} value={voice}>{voice}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Brand Tone *</label>
                <select
                  value={formData.brand_tone}
                  onChange={(e) => handleInputChange('brand_tone', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                >
                  <option value="">Select brand tone</option>
                  {brandTones.map(tone => (
                    <option key={tone} value={tone}>{tone}</option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Phone Number *</label>
              <input
                type="tel"
                value={formData.phone_number}
                onChange={(e) => handleInputChange('phone_number', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="+1 (555) 123-4567"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Street Address *</label>
              <input
                type="text"
                value={formData.street_address}
                onChange={(e) => handleInputChange('street_address', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="123 Main Street, Building Name, Floor/Unit"
              />
            </div>

            <div className="grid grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">City *</label>
                <input
                  type="text"
                  value={formData.city}
                  onChange={(e) => handleInputChange('city', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="City"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">State *</label>
                <input
                  type="text"
                  value={formData.state}
                  onChange={(e) => handleInputChange('state', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="State"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Country *</label>
                <input
                  type="text"
                  value={formData.country}
                  onChange={(e) => handleInputChange('country', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="Country"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Timezone *</label>
              <select
                value={formData.timezone}
                onChange={(e) => handleInputChange('timezone', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
              >
                <option value="">Select timezone</option>
                {timezones.map(timezone => (
                  <option key={timezone} value={timezone}>{timezone}</option>
                ))}
              </select>
            </div>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Current Presence & Focus Areas</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Current Presence</label>
              <div className="grid grid-cols-2 gap-2">
                {currentPresenceOptions.map(option => (
                  <label key={option} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.current_presence.includes(option)}
                      onChange={(e) => handleArrayChange('current_presence', option, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{option}</span>
                  </label>
                ))}
              </div>
              {formData.current_presence.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.currentPresenceOther || ''}
                    onChange={(e) => handleOtherInputChange('currentPresenceOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify your current presence"
                  />
                </div>
              )}
            </div>

            {/* Platform-Specific Input Fields */}
            {(formData.current_presence.includes('Website') || 
              formData.current_presence.includes('Facebook Page') || 
              formData.current_presence.includes('Instagram') || 
              formData.current_presence.includes('LinkedIn') || 
              formData.current_presence.includes('X (formerly Twitter)') || 
              formData.current_presence.includes('YouTube') || 
              formData.current_presence.includes('Google Business Profile') || 
              formData.current_presence.includes('Google Ads') || 
              formData.current_presence.includes('WhatsApp Business') || 
              formData.current_presence.includes('Email Marketing Platform')) && (
              <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                <h4 className="text-sm font-medium text-gray-700 mb-4">Platform Details</h4>
                <div className="space-y-4">
                  {formData.current_presence.includes('Website') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Website URL *</label>
                      <input
                        type="url"
                        value={formData.website_url || ''}
                        onChange={(e) => {
                          let value = e.target.value;
                          handleInputChange('website_url', value);
                        }}
                        onBlur={(e) => {
                          let value = e.target.value;
                          // Ensure https:// on blur if user hasn't added it
                          if (value && !value.startsWith('http://') && !value.startsWith('https://')) {
                            value = 'https://' + value;
                            handleInputChange('website_url', value);
                          }
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="https://your-website.com"
                        required
                      />
                      <p className="text-xs text-gray-500 mt-1">Must start with https://</p>
                    </div>
                  )}
                  
                  {formData.current_presence.includes('Facebook Page') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Facebook Page Link</label>
                      <input
                        type="url"
                        value={formData.facebook_page_name || ''}
                        onChange={(e) => handleInputChange('facebook_page_name', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., facebook.com/your-business"
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('Instagram') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Instagram Profile Link</label>
                      <input
                        type="url"
                        value={formData.instagram_profile_link || ''}
                        onChange={(e) => handleInputChange('instagram_profile_link', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., instagram.com/your-business"
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('LinkedIn') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">LinkedIn Company Page Link</label>
                      <input
                        type="url"
                        value={formData.linkedin_company_link || ''}
                        onChange={(e) => handleInputChange('linkedin_company_link', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., linkedin.com/company/your-business"
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('X (formerly Twitter)') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">X (Twitter) Profile Link</label>
                      <input
                        type="url"
                        value={formData.x_twitter_profile || ''}
                        onChange={(e) => handleInputChange('x_twitter_profile', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., twitter.com/your-business"
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('YouTube') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">YouTube Channel Link</label>
                      <input
                        type="url"
                        value={formData.youtube_channel_link || ''}
                        onChange={(e) => handleInputChange('youtube_channel_link', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., youtube.com/@your-business"
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('Google Business Profile') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Google Business Profile Link</label>
                      <input
                        type="url"
                        value={formData.google_business_profile || ''}
                        onChange={(e) => handleInputChange('google_business_profile', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., maps.google.com/business/..."
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('Google Ads') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Google Ads Account Details</label>
                      <input
                        type="text"
                        value={formData.google_ads_account || ''}
                        onChange={(e) => handleInputChange('google_ads_account', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., account ID or email"
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('WhatsApp Business') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">WhatsApp Business Details</label>
                      <input
                        type="text"
                        value={formData.whatsapp_business || ''}
                        onChange={(e) => handleInputChange('whatsapp_business', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., business name or mobile number"
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('Email Marketing Platform') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Email Marketing Platform</label>
                      <input
                        type="text"
                        value={formData.email_marketing_platform || ''}
                        onChange={(e) => handleInputChange('email_marketing_platform', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., Mailchimp, ConvertKit, etc."
                      />
                    </div>
                  )}
                  
                  {formData.current_presence.includes('Meta Ads (Facebook/Instagram)') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Meta Ads Account Details</label>
                      <input
                        type="text"
                        value={formData.meta_ads_accounts || ''}
                        onChange={(e) => handleInputChange('meta_ads_accounts', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        placeholder="e.g., account ID or email"
                      />
                    </div>
                  )}
                </div>
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Focus Areas</label>
              <div className="grid grid-cols-2 gap-2">
                {focusAreas.map(area => (
                  <label key={area} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.focus_areas.includes(area)}
                      onChange={(e) => handleArrayChange('focus_areas', area, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{area}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        )

      case 4:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Social Media & Goals</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Social Media Platforms *</label>
              <div className="grid grid-cols-3 gap-2">
                {socialPlatforms.map(platform => (
                  <label key={platform} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.social_media_platforms.includes(platform)}
                      onChange={(e) => handleArrayChange('social_media_platforms', platform, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{platform}</span>
                  </label>
                ))}
              </div>
              {formData.social_media_platforms.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.socialPlatformOther}
                    onChange={(e) => handleOtherInputChange('socialPlatformOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify the social media platform"
                  />
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Primary Goals *</label>
              <div className="grid grid-cols-2 gap-2">
                {goals.map(goal => (
                  <label key={goal} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.primary_goals.includes(goal)}
                      onChange={(e) => handleArrayChange('primary_goals', goal, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{goal}</span>
                  </label>
                ))}
              </div>
              {formData.primary_goals.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.goalOther}
                    onChange={(e) => handleOtherInputChange('goalOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify your primary goal"
                  />
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Key Metrics to Track *</label>
              <div className="grid grid-cols-2 gap-2">
                {metrics.map(metric => (
                  <label key={metric} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.key_metrics_to_track.includes(metric)}
                      onChange={(e) => handleArrayChange('key_metrics_to_track', metric, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{metric}</span>
                  </label>
                ))}
              </div>
              {formData.key_metrics_to_track.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.metricOther}
                    onChange={(e) => handleOtherInputChange('metricOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify the metric you want to track"
                  />
                </div>
              )}
            </div>
          </div>
        )

      case 5:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Content Strategy</h3>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Monthly Budget Range *</label>
                <select
                  value={formData.monthly_budget_range}
                  onChange={(e) => handleInputChange('monthly_budget_range', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                >
                  <option value="">Select budget range</option>
                  {budgetRanges.map(range => (
                    <option key={range} value={range}>{range}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Posting Frequency *</label>
                <select
                  value={formData.posting_frequency}
                  onChange={(e) => handleInputChange('posting_frequency', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                >
                  <option value="">Select frequency</option>
                  {postingFrequencies.map(freq => (
                    <option key={freq} value={freq}>{freq}</option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Preferred Content Types *</label>
              <div className="grid grid-cols-2 gap-2">
                {contentTypes.map(type => (
                  <label key={type} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.preferred_content_types.includes(type)}
                      onChange={(e) => handleArrayChange('preferred_content_types', type, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{type}</span>
                  </label>
                ))}
              </div>
              {formData.preferred_content_types.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.contentTypeOther}
                    onChange={(e) => handleOtherInputChange('contentTypeOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify the content type"
                  />
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Content Themes *</label>
              <div className="grid grid-cols-2 gap-2">
                {contentThemes.map(theme => (
                  <label key={theme} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.content_themes.includes(theme)}
                      onChange={(e) => handleArrayChange('content_themes', theme, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{theme}</span>
                  </label>
                ))}
              </div>
              {formData.content_themes.includes('Others') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.contentThemeOther}
                    onChange={(e) => handleOtherInputChange('contentThemeOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify the content theme"
                  />
                </div>
              )}
            </div>
          </div>
        )

      case 6:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Market & Competition</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Market Position *</label>
              <select
                value={formData.market_position}
                onChange={(e) => handleInputChange('market_position', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
              >
                <option value="">Select market position</option>
                {marketPositions.map(position => (
                  <option key={position.value} value={position.value}>
                    {position.label} - {position.description}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Products/Services *</label>
              <textarea
                value={formData.products_or_services}
                onChange={(e) => handleInputChange('products_or_services', e.target.value)}
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="Describe your main products or services..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Main Competitors</label>
              <input
                type="text"
                value={formData.main_competitors}
                onChange={(e) => handleInputChange('main_competitors', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="List your main competitors..."
              />
            </div>
          </div>
        )

      case 7:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Campaign Planning</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Important Launch Date</label>
              <div className="relative">
                <input
                  type="date"
                  value={formData.important_launch_dates}
                  onChange={(e) => handleInputChange('important_launch_dates', e.target.value)}
                  className="w-full px-4 py-3 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent [&::-webkit-calendar-picker-indicator]:opacity-0 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:right-0 [&::-webkit-calendar-picker-indicator]:w-full [&::-webkit-calendar-picker-indicator]:h-full [&::-webkit-calendar-picker-indicator]:cursor-pointer"
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Planned Promotions/Campaigns *</label>
              <textarea
                value={formData.planned_promotions_or_campaigns}
                onChange={(e) => handleInputChange('planned_promotions_or_campaigns', e.target.value)}
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="Describe any upcoming campaigns or promotions..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Top Performing Content Types *</label>
              <div className="grid grid-cols-2 gap-2">
                {contentTypes.map(type => (
                  <label key={type} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.top_performing_content_types.includes(type)}
                      onChange={(e) => handleArrayChange('top_performing_content_types', type, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{type}</span>
                  </label>
                ))}
              </div>
              {formData.top_performing_content_types.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.topPerformingContentTypeOther || ''}
                    onChange={(e) => handleOtherInputChange('topPerformingContentTypeOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify the top performing content type"
                  />
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Best Time to Post *</label>
              <div className="grid grid-cols-2 gap-2">
                {postingTimes.map(time => (
                  <label key={time} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={formData.best_time_to_post.includes(time)}
                      onChange={(e) => handleArrayChange('best_time_to_post', time, e.target.checked)}
                      className="rounded border-gray-300 text-pink-600 focus:ring-pink-500"
                    />
                    <span className="text-sm text-gray-700">{time}</span>
                  </label>
                ))}
              </div>
              {formData.best_time_to_post.includes('Other') && (
                <div className="mt-3">
                  <input
                    type="text"
                    value={otherInputs.postingTimeOther}
                    onChange={(e) => handleOtherInputChange('postingTimeOther', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                    placeholder="Please specify the best time to post"
                  />
                </div>
              )}
            </div>
          </div>
        )

      case 8:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Performance & Customer</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Successful Campaigns *</label>
              <textarea
                value={formData.successful_campaigns}
                onChange={(e) => handleInputChange('successful_campaigns', e.target.value)}
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="Describe your most successful marketing campaigns..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Hashtags That Work Well *</label>
              <input
                type="text"
                value={formData.hashtags_that_work_well}
                onChange={(e) => handleInputChange('hashtags_that_work_well', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="e.g., #smallbusiness #entrepreneur #marketing"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Customer Pain Points *</label>
              <textarea
                value={formData.customer_pain_points}
                onChange={(e) => handleInputChange('customer_pain_points', e.target.value)}
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="What problems do your customers face that you solve?"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Typical Customer Journey *</label>
              <textarea
                value={formData.typical_customer_journey}
                onChange={(e) => handleInputChange('typical_customer_journey', e.target.value)}
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                placeholder="Describe how customers typically discover and engage with your business..."
              />
            </div>
          </div>
        )

      case 9:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Automation & Platform</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Automation Level *</label>
              <select
                value={formData.automation_level}
                onChange={(e) => handleInputChange('automation_level', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
              >
                <option value="">Select automation level</option>
                {automationLevels.map(level => (
                  <option key={level.value} value={level.value}>
                    {level.label} - {level.description}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Platform-Specific Tone (Optional)</label>
              <div className="overflow-x-auto">
                <table className="min-w-full border border-gray-200 rounded-lg">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-2 text-left text-sm font-medium text-gray-700">Platform</th>
                      <th className="px-4 py-2 text-left text-sm font-medium text-gray-700">Tone</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {['Instagram', 'Facebook', 'LinkedIn', 'YouTube', 'X'].map(platform => (
                      <tr key={platform}>
                        <td className="px-4 py-2 text-sm text-gray-700">{platform}</td>
                        <td className="px-4 py-2">
                          <div className="flex flex-wrap gap-4">
                            {['Fun', 'Professional', 'Casual', 'Humorous', 'Bold', 'Neutral'].map(tone => (
                              <label key={tone} className="flex items-center space-x-2 cursor-pointer hover:bg-gray-50 px-2 py-1 rounded">
                                <input
                                  type="checkbox"
                                  value={tone}
                                  checked={formData[`platform_tone_${platform.toLowerCase()}`]?.includes(tone) || false}
                                  onChange={(e) => {
                                    const currentTones = formData[`platform_tone_${platform.toLowerCase()}`] || []
                                    if (e.target.checked) {
                                      // Add tone if checked
                                      const newTones = [...currentTones, tone]
                                      handleInputChange(`platform_tone_${platform.toLowerCase()}`, newTones)
                                    } else {
                                      // Remove tone if unchecked
                                      const newTones = currentTones.filter(t => t !== tone)
                                      handleInputChange(`platform_tone_${platform.toLowerCase()}`, newTones)
                                    }
                                  }}
                                  className="text-pink-600 focus:ring-pink-500 rounded"
                                />
                                <span className="text-sm text-gray-700">{tone}</span>
                              </label>
                            ))}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )

      case 10:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold text-gray-800">Review & Submit</h3>
            
            <div className="bg-gray-50 p-6 rounded-lg">
              <h4 className="font-semibold text-gray-800 mb-4">Review Your Information</h4>
              <div className="space-y-2 text-sm">
                <p><strong>Business Name:</strong> {formData.business_name}</p>
                <p><strong>Business Type:</strong> {formData.business_type.join(', ')}</p>
                <p><strong>Industry:</strong> {formData.industry.join(', ')}</p>
                <p><strong>City:</strong> {formData.city}, {formData.state}, {formData.country}</p>
                <p><strong>Social Platforms:</strong> {formData.social_media_platforms.join(', ')}</p>
                <p><strong>Primary Goals:</strong> {formData.primary_goals.join(', ')}</p>
                <p><strong>Monthly Budget:</strong> {formData.monthly_budget_range}</p>
                <p><strong>Automation Level:</strong> {formData.automation_level}</p>
              </div>
            </div>

            <div className="bg-pink-50 p-4 rounded-lg">
              <p className="text-sm text-pink-800">
                <strong>Ready to get started?</strong> Emily will use this information to provide personalized marketing assistance tailored to your business needs.
              </p>
            </div>
          </div>
        )

      default:
        return null
    }
  }
